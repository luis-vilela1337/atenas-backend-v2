version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: atenas-backend-dev
    restart: unless-stopped
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - ~/.ssh:/root/.ssh:ro
    ports:
      - '3000:3000'
      - '9229:9229' # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    command: pnpm run start:dev
    networks:
      - atenas-network

  db:
    image: postgres:14-alpine
    container_name: atenas-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-atenas_dev}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - '5432:5432'
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-atenas_dev}' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - atenas-network

  adminer:
    image: adminer:4.8.1
    container_name: atenas-adminer-dev
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db
    networks:
      - atenas-network

volumes:
  postgres_dev_data:
    driver: local

networks:
  atenas-network:
    driver: bridge