import {
  CreateOrderInput,
  CreateOrderResult,
  Order,
  OrderItemDetail,
  CartItem,
  ShippingAddress,
  OrderStatus,
} from '../entities/order.entity';
import { OrderRepositoryInterface } from '../repositories/order.repository.interface';
import { MercadoPagoRepositoryInterface } from '../../mercado-pago/repositories/mercado-pago.repository.interface';
import { PaymentPreference } from '../../mercado-pago/entities/payment-preference.entity';
import { UserSQLRepository } from '../../../infra/data/sql/repositories/user.repository';
import { ConfigService } from '@nestjs/config';

export class CreateOrderUseCase {
  constructor(
    private readonly orderRepository: OrderRepositoryInterface,
    private readonly mercadoPagoRepository: MercadoPagoRepositoryInterface,
    private readonly userRepository: UserSQLRepository,
    private readonly configService: ConfigService,
  ) {}

  async execute(input: CreateOrderInput): Promise<CreateOrderResult> {
    try {
      // 1. Validate selection details consistency
      this.validateSelectionDetails(input.cartItems);

      // 2. Validate shipping requirements
      this.validateShippingRequirement(input.cartItems, input.shippingDetails);

      // 2. Update user address if shipping details are provided and different
      if (input.shippingDetails) {
        await this.updateUserAddressIfDifferent(
          input.userId,
          input.shippingDetails,
        );
      }

      // 3. Calculate total amount
      const totalAmount = input.cartItems.reduce(
        (sum, item) => sum + item.totalPrice,
        0,
      );

      // 4. Handle free orders
      if (totalAmount === 0) {
        const order = await this.createOrder(
          input,
          totalAmount,
          OrderStatus.APPROVED,
        );
        return {
          orderId: order.id,
          checkoutUrl: this.configService.get('BATATA_CHECKOUT_URL'),
          paymentMethod: 'FREE',
          contractNumber: order.contractNumber,
        };
      }

      // 5. Check user credit
      const userCredit = await this.userRepository.findUserCreditByUserId(
        input.userId,
      );

      // If credit covers the full amount
      if (userCredit >= totalAmount) {
        // Deduct credit
        await this.userRepository.updateUserCredit(
          input.userId,
          userCredit - totalAmount,
        );

        const order = await this.createOrder(
          input,
          totalAmount,
          OrderStatus.APPROVED,
          totalAmount, // creditUsed
        );
        return {
          orderId: order.id,
          checkoutUrl: this.configService.get('BATATA_CHECKOUT_URL'),
          paymentMethod: 'CREDIT',
          contractNumber: order.contractNumber,
          creditUsed: totalAmount,
          remainingCredit: userCredit - totalAmount,
        };
      }

      // 6. Mercado Pago flow with partial credit
      const creditToUse = userCredit > 0 ? userCredit : 0;
      const amountToPay = totalAmount - creditToUse;

      // Deduct available credit if any
      if (creditToUse > 0) {
        await this.userRepository.updateUserCredit(input.userId, 0);
      }

      const order = await this.createOrder(
        input,
        totalAmount,
        OrderStatus.PENDING,
        creditToUse, // creditUsed
      );

      // Create Mercado Pago preference with remaining amount
      const preference = this.createMercadoPagoPreference(
        order,
        input,
        amountToPay,
      );
      const mercadoPagoResult =
        await this.mercadoPagoRepository.createPreference(preference);

      // Update order with payment gateway ID
      await this.orderRepository.updateOrderPaymentGatewayId(
        order.id,
        mercadoPagoResult.id,
      );

      return {
        orderId: order.id,
        checkoutUrl: mercadoPagoResult.checkoutUrl,
        paymentMethod: 'MERCADO_PAGO',
        contractNumber: order.contractNumber,
        creditUsed: creditToUse,
        remainingCredit: 0,
      };
    } catch (error) {
      throw new Error(`Failed to create order: ${error.message}`);
    }
  }

  private async createOrder(
    input: CreateOrderInput,
    totalAmount: number,
    paymentStatus: OrderStatus,
    creditUsed?: number,
  ): Promise<Order> {
    // Generate contract number
    const contractNumber = await this.generateContractNumber(input.userId);
    const contractUniqueId = `${contractNumber}-${Date.now()}`;

    const orderData: Partial<Order> = {
      userId: input.userId,
      totalAmount,
      paymentStatus,
      contractNumber,
      contractUniqueId,
      shippingAddress: input.shippingDetails,
      creditUsed,
      items: input.cartItems.map((item) => ({
        id: '', // Will be generated by repository
        productId: item.productId,
        productName: item.productName,
        productType: item.productType,
        itemPrice: item.totalPrice,
        details: this.createOrderItemDetails(item.selectionDetails),
      })),
    };

    return await this.orderRepository.createOrder(orderData as Order);
  }

  private createOrderItemDetails(selectionDetails: any): OrderItemDetail[] {
    const details: OrderItemDetail[] = [];

    // Handle full package selection (DIGITAL_FILES complete package)
    if (selectionDetails.isFullPackage) {
      details.push({
        id: '', // Will be generated by repository
        photoId: undefined,
        eventId: undefined,
        isPackage: true,
      });
      return details; // Return early for full package, no need to process individual items
    }

    // Handle photos selection (GENERIC and DIGITAL_FILES individual)
    if (selectionDetails.photos) {
      for (const photo of selectionDetails.photos) {
        details.push({
          id: '', // Will be generated by repository
          photoId: photo.id,
          eventId: photo.eventId,
          isPackage: undefined, // null for individual photos
        });
      }
    }

    // Handle events selection (DIGITAL_FILES packages)
    if (selectionDetails.events) {
      for (const event of selectionDetails.events) {
        details.push({
          id: '', // Will be generated by repository
          photoId: undefined,
          eventId: event.id,
          isPackage: event.isPackage,
        });
      }
    }

    // Handle album photos (ALBUM)
    if (selectionDetails.albumPhotos) {
      for (const photoId of selectionDetails.albumPhotos) {
        details.push({
          id: '', // Will be generated by repository
          photoId: photoId,
          eventId: undefined,
          isPackage: undefined, // null for album photos
        });
      }
    }

    return details;
  }

  private createMercadoPagoPreference(
    order: Order,
    input: CreateOrderInput,
    amountToPay?: number,
  ): PaymentPreference {
    // If amountToPay is provided, adjust item prices proportionally
    const totalAmount = order.totalAmount;
    const paymentAmount = amountToPay ?? totalAmount;

    return {
      items: order.items.map((item) => {
        const adjustedPrice =
          amountToPay !== undefined
            ? (item.itemPrice * paymentAmount) / totalAmount
            : item.itemPrice;

        return {
          id: item.productId,
          title: item.productName,
          description: `${item.productName} - ${item.productType}`,
          quantity: 1,
          unit_price: adjustedPrice,
        };
      }),
      payer: {
        name: input.payer.firstName,
        surname: input.payer.lastName,
        email: input.payer.email,
        phone: {
          area_code: input.payer.phone.areaCode,
          number: input.payer.phone.number,
        },
        address: input.shippingDetails
          ? {
              street_name: input.shippingDetails.street,
              street_number: input.shippingDetails.number,
              zip_code: input.shippingDetails.zipCode,
            }
          : {
              street_name: 'N/A',
              street_number: 'N/A',
              zip_code: '00000-000',
            },
      },
      externalReference: order.id, // Add order ID as external reference for webhook identification
    };
  }

  private async generateContractNumber(userId: string): Promise<string> {
    // Get user with institution data
    const user = await this.userRepository.findById(userId);

    if (!user || !user.institution) {
      throw new Error('User or institution not found');
    }

    return `${user.institution.contractNumber}-${user.identifier}`;
  }

  private async getOrderCountForYear(): Promise<number> {
    // This would need to be implemented in the repository
    // For now, using a simple timestamp-based approach
    return Math.floor(Math.random() * 100) + 1; // Placeholder - replace with actual repository call
  }

  private validateSelectionDetails(cartItems: CartItem[]): void {
    for (const item of cartItems) {
      const details = item.selectionDetails;

      if (details.isFullPackage) {
        if (
          (details.photos && details.photos.length > 0) ||
          (details.events && details.events.length > 0) ||
          (details.albumPhotos && details.albumPhotos.length > 0)
        ) {
          throw new Error(
            'When isFullPackage is true, no other selections (photos, events, albumPhotos) should be present',
          );
        }
      } else {
        const hasPhotos = details.photos && details.photos.length > 0;
        const hasEvents = details.events && details.events.length > 0;
        const hasAlbumPhotos =
          details.albumPhotos && details.albumPhotos.length > 0;

        if (!hasPhotos && !hasEvents && !hasAlbumPhotos) {
          throw new Error(
            'At least one selection type (photos, events, albumPhotos) is required when isFullPackage is false',
          );
        }
      }
    }
  }

  private validateShippingRequirement(
    cartItems: CartItem[],
    shippingDetails?: ShippingAddress,
  ): void {
    const requiresShipping = cartItems.some(
      (item) => item.productType !== 'DIGITAL_FILES',
    );

    if (requiresShipping && !shippingDetails) {
      throw new Error(
        'Shipping address is required for physical products (GENERIC or ALBUM)',
      );
    }
  }

  private async updateUserAddressIfDifferent(
    userId: string,
    shippingDetails: ShippingAddress,
  ): Promise<void> {
    const user = await this.userRepository.findById(userId);

    if (!user) {
      throw new Error('User not found');
    }

    const addressChanged =
      user.zipCode !== shippingDetails.zipCode ||
      user.street !== shippingDetails.street ||
      user.number !== shippingDetails.number ||
      user.complement !== shippingDetails.complement ||
      user.neighborhood !== shippingDetails.neighborhood ||
      user.city !== shippingDetails.city ||
      user.state !== shippingDetails.state;

    if (addressChanged) {
      await this.userRepository.updateUser(userId, {
        zipCode: shippingDetails.zipCode,
        street: shippingDetails.street,
        number: shippingDetails.number,
        complement: shippingDetails.complement,
        neighborhood: shippingDetails.neighborhood,
        city: shippingDetails.city,
        state: shippingDetails.state,
      });
    }
  }
}
